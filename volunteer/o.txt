<!DOCTYPE html> 
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Opportunities - V-Connect</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #4CAF50;
            --secondary-color: #45a049;
            --text-dark: #333333;
            --background-light: #f8f9fa;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--background-light);
        }

        .event-card {
            background: white;
            border-radius: 15px;
            margin-bottom: 1rem;
            overflow: hidden;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s;
            padding: 15px;
        }

        .event-card:hover {
            transform: translateY(-5px);
        }
    </style>
</head>
<body>

    <nav class="navbar navbar-expand-lg fixed-top">
        <div class="container">
            <a class="navbar-brand" href="home.html">
                <img src="../assets/v1.png" alt="V-Connect Logo" height="40">
                V-Connect
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="dashboard.html"><i class="fas fa-handshake"></i> Dashboard</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="opportunities.html"><i class="fas fa-search"></i> Find Opportunities</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="myevents.html"><i class="fas fa-calendar"></i> My Events</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="certificates.html"><i class="fas fa-certificate"></i> Certificates</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="profile.html">
                            <img src="" alt="Profile" id="navProfileImage" class="rounded-circle" width="30" height="30">
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container py-4 mt-5">
        <h2 class="mb-4">Available Opportunities</h2>
        <div id="eventsList">
            <!-- Events will be loaded here -->
        </div>
    </div>

    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Firebase Integration -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js";
        import { getFirestore, collection, getDocs, addDoc, doc, query, where, getDocsFromServer } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js";
        import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-auth.js";

        const firebaseConfig = {
            apiKey: "AIzaSyBAZ3Zap2Q_KBCtb6OZzdmLfARO6T0lMLg",
            authDomain: "v-connect-7d896.firebaseapp.com",
            projectId: "v-connect-7d896",
            storageBucket: "v-connect-7d896.appspot.com",
            messagingSenderId: "489654796371",
            appId: "1:489654796371:web:d0bf7b41970aec11d546a6",
            measurementId: "G-CBRKEL7DXS"
        };

        const app = initializeApp(firebaseConfig);
        const db = getFirestore(app);
        const auth = getAuth();

        let currentUser = null;

        // Listen for authentication state
        onAuthStateChanged(auth, (user) => {
            if (user) {
                currentUser = user;
                loadEvents();
            } else {
                alert("You need to log in to apply for events.");
                window.location.href = "login.html";
            }
        });

        async function loadEvents() {
            const eventsList = document.getElementById('eventsList');
            const eventsCollection = collection(db, "events");
            const snapshot = await getDocs(eventsCollection);

            if (snapshot.empty) {
                eventsList.innerHTML = `<div class="text-center text-muted">No events available at the moment.</div>`;
                return;
            }

            eventsList.innerHTML = ""; // Clear previous events

            snapshot.forEach(async (docSnap) => {
                const event = docSnap.data();
                const eventId = docSnap.id;

                const hasApplied = await checkIfApplied(eventId, currentUser.uid);

                eventsList.innerHTML += `
                    <div class="event-card">
                        <h5>${event.title}</h5>
                        <p class="text-muted mb-2"><i class="fas fa-calendar"></i> ${formatDate(event.date)}</p>
                        <p class="text-muted mb-2"><i class="fas fa-map-marker-alt"></i> ${event.location}</p>
                        <p>${event.description}</p>
                        <button class="btn btn-sm ${hasApplied ? 'btn-secondary' : 'btn-primary'}" 
                                onclick="${hasApplied ? '' : `applyToEvent('${eventId}')`}" 
                                ${hasApplied ? 'disabled' : ''}>
                            ${hasApplied ? 'Applied' : 'Apply'}
                        </button>
                    </div>
                `;
            });
        }

        async function checkIfApplied(eventId, userId) {
            const applicationsRef = collection(db, "applications");
            const q = query(applicationsRef, where("eventId", "==", eventId), where("userId", "==", userId));
            const snapshot = await getDocs(q);

            return !snapshot.empty;
        }

        async function applyToEvent(eventId) {
            if (!currentUser) {
                alert("Please log in to apply.");
                return;
            }

            const applicationData = {
                eventId: eventId,
                userId: currentUser.uid,
                appliedAt: new Date()
            };

            try {
                await addDoc(collection(db, "applications"), applicationData);
                alert("Successfully applied to the event!");
                loadEvents(); // Refresh events to update button state
            } catch (error) {
                console.error("Error applying to event:", error);
                alert("Failed to apply. Please try again.");
            }
        }

        function formatDate(date) {
            return new Date(date).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'short',
                day: 'numeric'
            });
        }
    </script>
</body>
</html>




///////////////////
manage application for volunteers <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Volunteers - V-Connect</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #f8f9fa;
        }
        .card {
            border-radius: 15px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            padding: 15px;
        }
        .btn-action {
            width: 100px;
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <h2 class="mb-4">Manage Volunteers</h2>
        <h4>Pending Applications</h4>
        <div id="pendingApplications" class="mb-4"></div>
        <h4>Approved Volunteers</h4>
        <div id="approvedVolunteers"></div>
    </div>

    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js";
        import { getFirestore, collection, getDocs, doc, updateDoc, deleteDoc, getDoc } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js";
        import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-auth.js";

        const firebaseConfig = {
            apiKey: "AIzaSyBAZ3Zap2Q_KBCtb6OZzdmLfARO6T0lMLg",
            authDomain: "v-connect-7d896.firebaseapp.com",
            projectId: "v-connect-7d896",
            storageBucket: "v-connect-7d896.appspot.com",
            messagingSenderId: "489654796371",
            appId: "1:489654796371:web:d0bf7b41970aec11d546a6",
            measurementId: "G-CBRKEL7DXS"
        };

        const app = initializeApp(firebaseConfig);
        const db = getFirestore(app);
        const auth = getAuth();

        let currentUser = null;
        onAuthStateChanged(auth, (user) => {
            if (user) {
                currentUser = user;
                loadApplications();
            } else {
                alert("You need to log in as an organizer.");
                window.location.href = "login.html";
            }
        });

        async function loadApplications() {
            const pendingContainer = document.getElementById("pendingApplications");
            const approvedContainer = document.getElementById("approvedVolunteers");
            pendingContainer.innerHTML = "";
            approvedContainer.innerHTML = "";

            const applications = await getDocs(collection(db, "applications"));
            for (const docSnap of applications.docs) {
                const appData = docSnap.data();
                const appId = docSnap.id;

                // Fetch user details to get the volunteer's name
                const userRef = doc(db, "users", appData.userId);
                const userSnap = await getDoc(userRef);
                const userData = userSnap.data();

                // Fetch event details to get the event name
                const eventRef = doc(db, "events", appData.eventId);
                const eventSnap = await getDoc(eventRef);
                const eventData = eventSnap.data();

                const card = `
                    <div class="card mb-3">
                        <div class="card-body">
                            <h5>${userData ? userData.name : "Unknown Volunteer"}</h5>
                            <p><strong>Event:</strong> ${eventData ? eventData.title : "Unknown Event"}</p>
                            <div class="d-flex gap-2">
                                <button class="btn btn-success btn-action" onclick="approveVolunteer('${appId}')">Approve</button>
                                <button class="btn btn-danger btn-action" onclick="rejectVolunteer('${appId}')">Reject</button>
                            </div>
                        </div>
                    </div>
                `;
                if (appData.status === "approved") {
                    approvedContainer.innerHTML += card;
                } else {
                    pendingContainer.innerHTML += card;
                }
            }
        }

        window.approveVolunteer = async function(appId) {
            const appRef = doc(db, "applications", appId);
            await updateDoc(appRef, { status: "approved" });
            alert("Volunteer approved!");
            loadApplications();
        };

        window.rejectVolunteer = async function(appId) {
            await deleteDoc(doc(db, "applications", appId));
            alert("Application rejected!");
            loadApplications();
        };
    </script>
</body>
</html>




<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Opportunities - V-Connect</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <!-- Your existing CSS remains the same until the end of the style tag -->
</head>
<body>
    <div class="page-header">
        <div class="container">
            <h2 class="mb-2">Available Opportunities</h2>
            <p class="mb-0">Find and apply for volunteer opportunities that match your interests</p>
        </div>
    </div>

    <div class="container">
        <div class="search-bar">
            <div class="row g-2">
                <div class="col-md-6">
                    <input type="text" class="form-control" id="searchInput" placeholder="Search opportunities...">
                </div>
                <div class="col-md-4">
                    <select class="form-select" id="categoryFilter">
                        <option value="">All Categories</option>
                        <option value="education">Education</option>
                        <option value="environment">Environment</option>
                        <option value="healthcare">Healthcare</option>
                        <option value="community">Community Service</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <button class="btn btn-primary w-100" onclick="searchEvents()">
                        <i class="fas fa-search me-2"></i>Search
                    </button>
                </div>
            </div>
        </div>

        <div class="filters">
            <button class="filter-btn active" data-filter="all">All</button>
            <button class="filter-btn" data-filter="upcoming">Upcoming</button>
            <button class="filter-btn" data-filter="applied">Applied</button>
            <button class="filter-btn" data-filter="remote">Remote</button>
        </div>

        <div id="eventsList" class="row">
            <!-- Events will be loaded here dynamically -->
        </div>
    </div>

    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js";
        import { getFirestore, collection, getDocs, addDoc, query, where, deleteDoc, doc, updateDoc } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js";
        import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-auth.js";

        const firebaseConfig = {
            apiKey: "AIzaSyBAZ3Zap2Q_KBCtb6OZzdmLfARO6T0lMLg",
            authDomain: "v-connect-7d896.firebaseapp.com",
            projectId: "v-connect-7d896",
            storageBucket: "v-connect-7d896.appspot.com",
            messagingSenderId: "489654796371",
            appId: "1:489654796371:web:d0bf7b41970aec11d546a6",
            measurementId: "G-CBRKEL7DXS"
        };

        const app = initializeApp(firebaseConfig);
        const db = getFirestore(app);
        const auth = getAuth();
        let currentUser = null;

        // Initialize filter buttons
        document.querySelectorAll('.filter-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
                this.classList.add('active');
                filterEvents(this.dataset.filter);
            });
        });

        onAuthStateChanged(auth, (user) => {
            if (user) {
                currentUser = user;
                loadEvents();
            } else {
                window.location.href = "login.html";
            }
        });

        async function loadEvents() {
            try {
                const eventsList = document.getElementById('eventsList');
                const eventsCollection = collection(db, "events");
                const snapshot = await getDocs(eventsCollection);

                if (snapshot.empty) {
                    eventsList.innerHTML = `
                        <div class="col-12 text-center py-5">
                            <i class="fas fa-calendar-times fa-3x text-muted mb-3"></i>
                            <h4>No events available</h4>
                            <p class="text-muted">Check back later for new opportunities</p>
                        </div>`;
                    return;
                }

                eventsList.innerHTML = "";
                snapshot.forEach(async (doc) => {
                    const event = doc.data();
                    const eventId = doc.id;
                    const hasApplied = await checkIfApplied(eventId, currentUser.uid);
                    
                    const eventCard = `
                        <div class="col-md-6 col-lg-4 mb-4">
                            <div class="event-card">
                                <div class="event-header">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h5 class="mb-0">${event.title}</h5>
                                        <span class="badge-custom status-open">Open</span>
                                    </div>
                                </div>
                                <div class="event-body">
                                    <div class="event-meta">
                                        <div class="meta-item">
                                            <i class="fas fa-calendar"></i>
                                            <span>${event.date}</span>
                                        </div>
                                        <div class="meta-item">
                                            <i class="fas fa-map-marker-alt"></i>
                                            <span>${event.location}</span>
                                        </div>
                                    </div>
                                    <p class="mb-0">${event.description}</p>
                                </div>
                                <div class="event-footer">
                                    <button class="btn apply-button ${hasApplied ? 'btn-secondary' : 'btn-primary'}" 
                                            onclick="${hasApplied ? 'cancelApplication' : 'applyToEvent'}('${eventId}')">
                                        ${hasApplied ? '<i class="fas fa-check me-2"></i>Applied' : '<i class="fas fa-hand-paper me-2"></i>Apply Now'}
                                    </button>
                                </div>
                            </div>
                        </div>
                    `;
                    eventsList.innerHTML += eventCard;
                });
            } catch (error) {
                console.error("Error loading events:", error);
                showAlert("Error loading events", "danger");
            }
        }

        async function checkIfApplied(eventId, userId) {
            const applicationsRef = collection(db, "applications");
            const q = query(applicationsRef, 
                where("eventId", "==", eventId), 
                where("userId", "==", userId)
            );
            const snapshot = await getDocs(q);
            return !snapshot.empty;
        }

        window.applyToEvent = async function(eventId) {
            if (!currentUser) return;
            try {
                await addDoc(collection(db, "applications"), {
                    eventId,
                    userId: currentUser.uid,
                    status: "pending",
                    appliedAt: new Date()
                });
                showAlert("Successfully applied!", "success");
                loadEvents();
            } catch (error) {
                showAlert("Error applying to event", "danger");
            }
        };

        window.cancelApplication = async function(eventId) {
            if (!currentUser) return;
            try {
                const q = query(
                    collection(db, "applications"),
                    where("eventId", "==", eventId),
                    where("userId", "==", currentUser.uid)
                );
                const snapshot = await getDocs(q);
                if (!snapshot.empty) {
                    await deleteDoc(doc(db, "applications", snapshot.docs[0].id));
                    showAlert("Application cancelled", "success");
                    loadEvents();
                }
            } catch (error) {
                showAlert("Error cancelling application", "danger");
            }
        };

        function showAlert(message, type) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed top-0 end-0 m-3`;
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            document.body.appendChild(alertDiv);
            setTimeout(() => alertDiv.remove(), 3000);
        }

        // Make functions available globally
        window.searchEvents = searchEvents;
        window.filterEvents = filterEvents;
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
